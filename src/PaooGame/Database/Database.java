package PaooGame.Database;

import PaooGame.Items.Coin;
import PaooGame.Items.Key;
import PaooGame.Items.SuperObject;
import PaooGame.Maps.Map;
import PaooGame.RefLinks;

import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;

public class Database {
    public DatabaseManager db;

    public Database(){
        this.db = DatabaseManager.getInstance();
    }
    public boolean connect(){

        if(db.connection != null) {
            if (db.isOracleDatabase == false) {
                return (db.connect() != null);
            } else {
                System.out.println("Connected already to the database !!!");
                return true;
            }
        }
        return (db.connect() != null);
    }

    public boolean isConnected(){
        return (db.connection != null);
    }
    public void disconnect(){
//        db.disconnect();
        //System.out.println("Disconnecting...");
        db.disconnect();
    }

    public int[][] loadCollisionMap1(int width , int height){
        String path = "res/maps/collision/map1.txt";

        int [][] map = new int[height][width];
        int [][] tiles=new int[width][height];
        String line;
        int row = 0;

        try {

            String sql =null;
            Statement stm = null;
//            sql = "DROP TABLE MAP1";

            stm = db.connection.createStatement();
            //stm.executeUpdate(sql);

            if(db.isOracleDatabase) {
                //mai intai stergem
                sql = "BEGIN " +
                        "   EXECUTE IMMEDIATE 'DROP TABLE CollisionMAP1'; " +
                        "EXCEPTION " +
                        "   WHEN OTHERS THEN " +
                        "      IF SQLCODE != -942 THEN RAISE; END IF; " +
                        "END;";
                stm.execute(sql);

                sql = "CREATE TABLE CollisionMAP1 " +
                        "(ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                        "LINIE NUMBER NOT NULL,"
                        + "COLOANA NUMBER NOT NULL," +
                        "VALUE NUMBER NOT NULL)";
            }
            else{
                sql = "DROP TABLE IF EXISTS CollisionMAP1";
                stm.execute(sql);

                System.out.println("CollisionMAP1 Deleted !!!");
                sql = "CREATE TABLE IF NOT EXISTS CollisionMAP1 " +
                        "(ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "LINIE INTEGER NOT NULL,"
                        + "COLOANA INTEGER NOT NULL," +
                        "VALUE INTEGER NOT NULL)";
            }
//            stm = db.connection.createStatement();
            int delay = 50000;
            while((delay--) !=0);

            stm.executeUpdate(sql);
            stm.close();
        }
        catch (SQLException e){
            System.out.println("Error creating MAP1 -> "+e.getMessage());
        }
        try {

//            System.out.println("Trying to open file with FileReader...");
            FileReader fr = new FileReader(path);
//            System.out.println("FileReader opened successfully.");
            BufferedReader reader = new BufferedReader(fr);

            while((line = reader.readLine()) != null && row <height){
                line = line.trim(); //elimina spatiile de la inceput si sfarsit
                if(line.isEmpty()) continue;

                String [] element = line.split("\\s+");
                for(int i=0;i<width;i++)
                {
                    map[row][i] = Integer.parseInt(element[i]);
                }

                row++;
            }
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    tiles[j][i] = map[i][j];
                }
            }

            reader.close();
        }
        catch (IOException e)
        {
            System.out.println("Text file ThematicMap couldn't be opened");
        }

        try{

            for(int i=0;i<map.length;i++){
                for(int j=0;j<map[i].length;j++){
                    String sql = "INSERT INTO CollisionMAP1 (LINIE,COLOANA,VALUE) VALUES ("+i+","+j+","+map[i][j]+")";
                    Statement stm = null;
                    stm = db.connection.createStatement();
                    stm.executeUpdate(sql);
                    stm.close();
                }
            }
        }catch (SQLException e){
            System.out.println("Error loading MAP1 -> "+e.getMessage());
        }
        return map;
    }
    public int[][] loadThematicMap1(int width , int height){
        String path = "res/maps/thematic/map1.txt";

        int [][] map = new int[height][width];
        int [][] tiles=new int[width][height];
        String line;
        int row = 0;

        try {
            String sql =null;
            Statement stm = null;
//            sql = "DROP TABLE MAP1";
//
            stm = db.connection.createStatement();
//            stm.executeUpdate(sql);
            if(db.isOracleDatabase) {
                sql = "BEGIN " +
                        "   EXECUTE IMMEDIATE 'DROP TABLE MAP1'; " +
                        "EXCEPTION " +
                        "   WHEN OTHERS THEN " +
                        "      IF SQLCODE != -942 THEN RAISE; END IF; " +
                        "END;";
                stm.execute(sql);

                sql = "CREATE TABLE MAP1 " +
                        "(ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                        "LINIE NUMBER NOT NULL,"
                        + "COLOANA NUMBER NOT NULL," +
                        "VALUE NUMBER NOT NULL)";
            }
            else{
                sql = "DROP TABLE IF EXISTS MAP1";
                stm.execute(sql);

                sql = "CREATE TABLE IF NOT EXISTS MAP1 " +
                        "(ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "LINIE INTEGER NOT NULL,"
                        + "COLOANA INTEGER NOT NULL," +
                        "VALUE INTEGER NOT NULL)";
            }
//            stm = db.connection.createStatement();
            int delay = 50000;
            while((delay--) !=0);

            stm.executeUpdate(sql);
            stm.close();
        }
        catch (SQLException e){
            System.out.println("Error creating MAP1 -> "+e.getMessage());
        }
        try {
//            System.out.println("Trying to open file with FileReader...");
            FileReader fr = new FileReader(path);
//            System.out.println("FileReader opened successfully.");
            BufferedReader reader = new BufferedReader(fr);

            while((line = reader.readLine()) != null && row <height){
                line = line.trim(); //elimina spatiile de la inceput si sfarsit
                if(line.isEmpty()) continue;

                String [] element = line.split("\\s+");
                for(int i=0;i<width;i++)
                {
                    map[row][i] = Integer.parseInt(element[i]);
                }

                row++;
            }
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    tiles[j][i] = map[i][j];
                }
            }

            reader.close();
        }
        catch (IOException e)
        {
            System.out.println("Text file ThematicMap couldn't be opened");
        }

        try{
            for(int i=0;i<map.length;i++){
                for(int j=0;j<map[i].length;j++){
                    String sql = "INSERT INTO MAP1 (LINIE,COLOANA,VALUE) VALUES ("+i+","+j+","+map[i][j]+")";
                    Statement stm = null;
                    stm = db.connection.createStatement();
                    stm.executeUpdate(sql);
                    stm.close();
                }
            }
        }catch (SQLException e){
            System.out.println("Error loading MAP1 -> "+e.getMessage());
        }
        return map;
    }
    public boolean isOracleDatabase(){
        return db.isOracleDatabase;
    }


    public int[][] downloadCollisionMap1(){

        int height=0,width=0;
        try(Statement stmt = db.connection.createStatement()){
            System.out.println("Downloading CollisionMAP1 from database...");
            String querySize = "SELECT MAX(LINIE) AS maxLine , MAX(COLOANA) AS maxCol FROM MAP1 ";
            try (ResultSet rs = stmt.executeQuery(querySize)) {
                if (rs.next()) {
                    height = rs.getInt("maxLine") + 1;
                    width = rs.getInt("maxCol") + 1;
                }
            }

            int[][] map = new int[height][width];
            String query = "SELECT LINIE,COLOANA , VALUE FROM CollisionMAP1";
            try (ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int linie = rs.getInt("LINIE");
                    int coloana = rs.getInt("COLOANA");
                    int value = rs.getInt("VALUE");
                    map[linie][coloana] = value;
                }
            }
            return map;

        }catch (SQLException e){
            e.printStackTrace();
            return null;
        }
    }
    public int[][] downloadThematicMap1(){
        //verfiyConnectionToOracleDatabase();
        int height=0,width=0;
        try(Statement stmt = db.connection.createStatement()){
            System.out.println("Downloading MAP1 from database...");
            String querySize = "SELECT MAX(LINIE) AS maxLine , MAX(COLOANA) AS maxCol FROM MAP1 ";
            try (ResultSet rs = stmt.executeQuery(querySize)) {
                if (rs.next()) {
                    height = rs.getInt("maxLine") + 1;
                    width = rs.getInt("maxCol") + 1;
                }
            }

            int[][] map = new int[height][width];
            String query = "SELECT LINIE,COLOANA , VALUE FROM MAP1";
            try (ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int linie = rs.getInt("LINIE");
                    int coloana = rs.getInt("COLOANA");
                    int value = rs.getInt("VALUE");
                    map[linie][coloana] = value;
                }
            }
            return map;

        }catch (SQLException e){
            e.printStackTrace();
            return null;
        }
    }

    public int[][] loadCollisionMap2(int width , int height){
        String path = "res/maps/collision/map2.txt";

        int [][] map = new int[height][width];
        int [][] tiles=new int[width][height];
        String line;
        int row = 0;

        try {

            String sql =null;
            Statement stm = null;
//            sql = "DROP TABLE MAP1";

            stm = db.connection.createStatement();
            //stm.executeUpdate(sql);

            if(db.isOracleDatabase) {
                //mai intai stergem
                sql = "BEGIN " +
                        "   EXECUTE IMMEDIATE 'DROP TABLE CollisionMAP2'; " +
                        "EXCEPTION " +
                        "   WHEN OTHERS THEN " +
                        "      IF SQLCODE != -942 THEN RAISE; END IF; " +
                        "END;";
                stm.execute(sql);

                sql = "CREATE TABLE CollisionMAP2 " +
                        "(ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                        "LINIE NUMBER NOT NULL,"
                        + "COLOANA NUMBER NOT NULL," +
                        "VALUE NUMBER NOT NULL)";
            }
            else{
                sql = "DROP TABLE IF EXISTS CollisionMAP2";
                stm.execute(sql);

                System.out.println("CollisionMAP2 Deleted !!!");
                sql = "CREATE TABLE IF NOT EXISTS CollisionMAP2 " +
                        "(ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "LINIE INTEGER NOT NULL,"
                        + "COLOANA INTEGER NOT NULL," +
                        "VALUE INTEGER NOT NULL)";
            }
//            stm = db.connection.createStatement();
            int delay = 50000;
            while((delay--) !=0);

            stm.executeUpdate(sql);
            stm.close();
        }
        catch (SQLException e){
            System.out.println("Error creating CollisionMAP2 -> "+e.getMessage());
        }
        try {

//            System.out.println("Trying to open file with FileReader...");
            FileReader fr = new FileReader(path);
//            System.out.println("FileReader opened successfully.");
            BufferedReader reader = new BufferedReader(fr);

            while((line = reader.readLine()) != null && row <height){
                line = line.trim(); //elimina spatiile de la inceput si sfarsit
                if(line.isEmpty()) continue;

                String [] element = line.split("\\s+");
                for(int i=0;i<width;i++)
                {
                    map[row][i] = Integer.parseInt(element[i]);
                }

                row++;
            }
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    tiles[j][i] = map[i][j];
                }
            }

            reader.close();
        }
        catch (IOException e)
        {
            System.out.println("Text file ThematicMap couldn't be opened");
        }

        try{

            for(int i=0;i<map.length;i++){
                for(int j=0;j<map[i].length;j++){
                    String sql = "INSERT INTO CollisionMAP2 (LINIE,COLOANA,VALUE) VALUES ("+i+","+j+","+map[i][j]+")";
                    Statement stm = null;
                    stm = db.connection.createStatement();
                    stm.executeUpdate(sql);
                    stm.close();
                }
            }
        }catch (SQLException e){
            System.out.println("Error loading MAP2 -> "+e.getMessage());
        }
        return map;
    }
    public int[][] loadThematicMap2(int width , int height){
        String path = "res/maps/thematic/map2.txt";

        int [][] map = new int[height][width];
        int [][] tiles=new int[width][height];
        String line;
        int row = 0;

        try {
            String sql =null;
            Statement stm = null;
//            sql = "DROP TABLE MAP1";
//
            stm = db.connection.createStatement();
//            stm.executeUpdate(sql);
            if(db.isOracleDatabase) {
                sql = "BEGIN " +
                        "   EXECUTE IMMEDIATE 'DROP TABLE MAP2'; " +
                        "EXCEPTION " +
                        "   WHEN OTHERS THEN " +
                        "      IF SQLCODE != -942 THEN RAISE; END IF; " +
                        "END;";
                stm.execute(sql);

                sql = "CREATE TABLE MAP2 " +
                        "(ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                        "LINIE NUMBER NOT NULL,"
                        + "COLOANA NUMBER NOT NULL," +
                        "VALUE NUMBER NOT NULL)";
            }
            else{
                sql = "DROP TABLE IF EXISTS MAP2";
                stm.execute(sql);

                sql = "CREATE TABLE IF NOT EXISTS MAP2 " +
                        "(ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "LINIE INTEGER NOT NULL,"
                        + "COLOANA INTEGER NOT NULL," +
                        "VALUE INTEGER NOT NULL)";
            }
//            stm = db.connection.createStatement();
            int delay = 50000;
            while((delay--) !=0);

            stm.executeUpdate(sql);
            stm.close();
        }
        catch (SQLException e){
            System.out.println("Error creating MAP2 -> "+e.getMessage());
        }
        try {
//            System.out.println("Trying to open file with FileReader...");
            FileReader fr = new FileReader(path);
//            System.out.println("FileReader opened successfully.");
            BufferedReader reader = new BufferedReader(fr);

            while((line = reader.readLine()) != null && row <height){
                line = line.trim(); //elimina spatiile de la inceput si sfarsit
                if(line.isEmpty()) continue;

                String [] element = line.split("\\s+");
                for(int i=0;i<width;i++)
                {
                    map[row][i] = Integer.parseInt(element[i]);
                }

                row++;
            }
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    tiles[j][i] = map[i][j];
                }
            }

            reader.close();
        }
        catch (IOException e)
        {
            System.out.println("Text file ThematicMap couldn't be opened");
        }

        try{
            for(int i=0;i<map.length;i++){
                for(int j=0;j<map[i].length;j++){
                    String sql = "INSERT INTO MAP2 (LINIE,COLOANA,VALUE) VALUES ("+i+","+j+","+map[i][j]+")";
                    Statement stm = null;
                    stm = db.connection.createStatement();
                    stm.executeUpdate(sql);
                    stm.close();
                }
            }
        }catch (SQLException e){
            System.out.println("Error loading MAP2 -> "+e.getMessage());
        }
        return map;
    }

    public int[][] downloadCollisionMap2(){

        int height=0,width=0;
        try(Statement stmt = db.connection.createStatement()){
            System.out.println("Downloading CollisionMAP2 from database...");
            String querySize = "SELECT MAX(LINIE) AS maxLine , MAX(COLOANA) AS maxCol FROM CollisionMAP2 ";
            try (ResultSet rs = stmt.executeQuery(querySize)) {
                if (rs.next()) {
                    height = rs.getInt("maxLine") + 1;
                    width = rs.getInt("maxCol") + 1;
                }
            }

            int[][] map = new int[height][width];
            String query = "SELECT LINIE,COLOANA , VALUE FROM CollisionMAP2";
            try (ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int linie = rs.getInt("LINIE");
                    int coloana = rs.getInt("COLOANA");
                    int value = rs.getInt("VALUE");
                    map[linie][coloana] = value;
                }
            }
            return map;

        }catch (SQLException e){
            e.printStackTrace();
            return null;
        }
    }
    public int[][] downloadThematicMap2(){
        //verfiyConnectionToOracleDatabase();
        int height=0,width=0;
        try(Statement stmt = db.connection.createStatement()){
            System.out.println("Downloading MAP2 from database...");
            String querySize = "SELECT MAX(LINIE) AS maxLine , MAX(COLOANA) AS maxCol FROM MAP2 ";
            try (ResultSet rs = stmt.executeQuery(querySize)) {
                if (rs.next()) {
                    height = rs.getInt("maxLine") + 1;
                    width = rs.getInt("maxCol") + 1;
                }
            }

            int[][] map = new int[height][width];
            String query = "SELECT LINIE,COLOANA , VALUE FROM MAP2";
            try (ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int linie = rs.getInt("LINIE");
                    int coloana = rs.getInt("COLOANA");
                    int value = rs.getInt("VALUE");
                    map[linie][coloana] = value;
                }
            }
            return map;

        }catch (SQLException e){
            e.printStackTrace();
            return null;
        }
    }
    public int[][] loadCollisionMap3(int width , int height){
        String path = "res/maps/collision/map3.txt";

        int [][] map = new int[height][width];
        int [][] tiles=new int[width][height];
        String line;
        int row = 0;

        try {

            String sql =null;
            Statement stm = null;
//            sql = "DROP TABLE MAP1";

            stm = db.connection.createStatement();
            //stm.executeUpdate(sql);

            if(db.isOracleDatabase) {
                //mai intai stergem
                sql = "BEGIN " +
                        "   EXECUTE IMMEDIATE 'DROP TABLE CollisionMAP3'; " +
                        "EXCEPTION " +
                        "   WHEN OTHERS THEN " +
                        "      IF SQLCODE != -942 THEN RAISE; END IF; " +
                        "END;";
                stm.execute(sql);

                sql = "CREATE TABLE CollisionMAP3 " +
                        "(ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                        "LINIE NUMBER NOT NULL,"
                        + "COLOANA NUMBER NOT NULL," +
                        "VALUE NUMBER NOT NULL)";
            }
            else{
                sql = "DROP TABLE IF EXISTS CollisionMAP3";
                stm.execute(sql);

                System.out.println("CollisionMAP3 Deleted !!!");
                sql = "CREATE TABLE IF NOT EXISTS CollisionMAP3 " +
                        "(ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "LINIE INTEGER NOT NULL,"
                        + "COLOANA INTEGER NOT NULL," +
                        "VALUE INTEGER NOT NULL)";
            }
//            stm = db.connection.createStatement();
            int delay = 50000;
            while((delay--) !=0);

            stm.executeUpdate(sql);
            stm.close();
        }
        catch (SQLException e){
            System.out.println("Error creating CollisionMAP3 -> "+e.getMessage());
        }
        try {

//            System.out.println("Trying to open file with FileReader...");
            FileReader fr = new FileReader(path);
//            System.out.println("FileReader opened successfully.");
            BufferedReader reader = new BufferedReader(fr);

            while((line = reader.readLine()) != null && row <height){
                line = line.trim(); //elimina spatiile de la inceput si sfarsit
                if(line.isEmpty()) continue;

                String [] element = line.split("\\s+");
                for(int i=0;i<width;i++)
                {
                    map[row][i] = Integer.parseInt(element[i]);
                }

                row++;
            }
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    tiles[j][i] = map[i][j];
                }
            }

            reader.close();
        }
        catch (IOException e)
        {
            System.out.println("Text file ThematicMap couldn't be opened");
        }

        try{

            for(int i=0;i<map.length;i++){
                for(int j=0;j<map[i].length;j++){
                    String sql = "INSERT INTO CollisionMAP3 (LINIE,COLOANA,VALUE) VALUES ("+i+","+j+","+map[i][j]+")";
                    Statement stm = null;
                    stm = db.connection.createStatement();
                    stm.executeUpdate(sql);
                    stm.close();
                }
            }
        }catch (SQLException e){
            System.out.println("Error loading CollisionMAP3 -> "+e.getMessage());
        }
        return map;
    }
    public int[][] loadThematicMap3(int width , int height){
        String path = "res/maps/thematic/map3.txt";

        int [][] map = new int[height][width];
        int [][] tiles=new int[width][height];
        String line;
        int row = 0;

        try {
            String sql =null;
            Statement stm = null;
//            sql = "DROP TABLE MAP1";
//
            stm = db.connection.createStatement();
//            stm.executeUpdate(sql);
            if(db.isOracleDatabase) {
                sql = "BEGIN " +
                        "   EXECUTE IMMEDIATE 'DROP TABLE MAP3'; " +
                        "EXCEPTION " +
                        "   WHEN OTHERS THEN " +
                        "      IF SQLCODE != -942 THEN RAISE; END IF; " +
                        "END;";
                stm.execute(sql);

                sql = "CREATE TABLE MAP3 " +
                        "(ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                        "LINIE NUMBER NOT NULL,"
                        + "COLOANA NUMBER NOT NULL," +
                        "VALUE NUMBER NOT NULL)";
            }
            else{
                sql = "DROP TABLE IF EXISTS MAP3";
                stm.execute(sql);

                sql = "CREATE TABLE IF NOT EXISTS MAP3 " +
                        "(ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                        "LINIE INTEGER NOT NULL,"
                        + "COLOANA INTEGER NOT NULL," +
                        "VALUE INTEGER NOT NULL)";
            }
//            stm = db.connection.createStatement();
            int delay = 50000;
            while((delay--) !=0);

            stm.executeUpdate(sql);
            stm.close();
        }
        catch (SQLException e){
            System.out.println("Error creating MAP3 -> "+e.getMessage());
        }
        try {
//            System.out.println("Trying to open file with FileReader...");
            FileReader fr = new FileReader(path);
//            System.out.println("FileReader opened successfully.");
            BufferedReader reader = new BufferedReader(fr);

            while((line = reader.readLine()) != null && row <height){
                line = line.trim(); //elimina spatiile de la inceput si sfarsit
                if(line.isEmpty()) continue;

                String [] element = line.split("\\s+");
                for(int i=0;i<width;i++)
                {
                    map[row][i] = Integer.parseInt(element[i]);
                }

                row++;
            }
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    tiles[j][i] = map[i][j];
                }
            }

            reader.close();
        }
        catch (IOException e)
        {
            System.out.println("Text file ThematicMap couldn't be opened");
        }

        try{
            for(int i=0;i<map.length;i++){
                for(int j=0;j<map[i].length;j++){
                    String sql = "INSERT INTO MAP3 (LINIE,COLOANA,VALUE) VALUES ("+i+","+j+","+map[i][j]+")";
                    Statement stm = null;
                    stm = db.connection.createStatement();
                    stm.executeUpdate(sql);
                    stm.close();
                }
            }
        }catch (SQLException e){
            System.out.println("Error loading MAP3 -> "+e.getMessage());
        }
        return map;
    }

    public int[][] downloadCollisionMap3(){

        int height=0,width=0;
        try(Statement stmt = db.connection.createStatement()){
            System.out.println("Downloading CollisionMAP3 from database...");
            String querySize = "SELECT MAX(LINIE) AS maxLine , MAX(COLOANA) AS maxCol FROM CollisionMAP3 ";
            try (ResultSet rs = stmt.executeQuery(querySize)) {
                if (rs.next()) {
                    height = rs.getInt("maxLine") + 1;
                    width = rs.getInt("maxCol") + 1;
                }
            }

            int[][] map = new int[height][width];
            String query = "SELECT LINIE,COLOANA , VALUE FROM CollisionMAP3";
            try (ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int linie = rs.getInt("LINIE");
                    int coloana = rs.getInt("COLOANA");
                    int value = rs.getInt("VALUE");
                    map[linie][coloana] = value;
                }
            }
            return map;

        }catch (SQLException e){
            e.printStackTrace();
            return null;
        }
    }
    public int[][] downloadThematicMap3(){
        //verfiyConnectionToOracleDatabase();
        int height=0,width=0;
        try(Statement stmt = db.connection.createStatement()){
            System.out.println("Downloading MAP3 from database...");
            String querySize = "SELECT MAX(LINIE) AS maxLine , MAX(COLOANA) AS maxCol FROM MAP3 ";
            try (ResultSet rs = stmt.executeQuery(querySize)) {
                if (rs.next()) {
                    height = rs.getInt("maxLine") + 1;
                    width = rs.getInt("maxCol") + 1;
                }
            }

            int[][] map = new int[height][width];
            String query = "SELECT LINIE,COLOANA , VALUE FROM MAP3";
            try (ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int linie = rs.getInt("LINIE");
                    int coloana = rs.getInt("COLOANA");
                    int value = rs.getInt("VALUE");
                    map[linie][coloana] = value;
                }
            }
            return map;

        }catch (SQLException e){
            e.printStackTrace();
            return null;
        }
    }

    public void createPlayersTable()
    {
        if(isOracleDatabase()) {
            String sql = """
                    BEGIN
                        EXECUTE IMMEDIATE '
                            CREATE TABLE players (
                                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                                username VARCHAR2(50) UNIQUE NOT NULL,
                                password VARCHAR2(50) NOT NULL,
                                score NUMBER DEFAULT 0
                            )
                        ';
                    EXCEPTION
                        WHEN OTHERS THEN
                            IF SQLCODE != -955 THEN -- -955 = table already exists
                                RAISE;
                            END IF;
                    END;
                    """;

            try (Statement stmt = db.connection.createStatement()) {
                stmt.execute(sql);
                System.out.println("Players table created successfully (Oracle).");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        else
        {
            String sql = """
            CREATE TABLE IF NOT EXISTS players (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                score INTEGER DEFAULT 0
            );
            """;

            try(Statement stmt = db.connection.createStatement()){
                stmt.execute(sql);
                System.out.println("Players table created successfully.");
            }catch (SQLException e){
                e.printStackTrace();
            }
        }

    }

    public boolean usernameExists(String username)
    {
        String sql = "SELECT 1 FROM players WHERE username = ? FETCH FIRST ROWS ONLY";

        try(PreparedStatement pstmt = db.connection.prepareStatement(sql))
        {
            pstmt.setString(1, username);
            try(ResultSet rs = pstmt.executeQuery())
            {
                return rs.next(); // daca exista un rezultat , inseamna ca username-ul exista deja
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    public boolean insertPlayer(String username,String password)
    {
        if (usernameExists(username)) {
            System.out.println("Username-ul există deja. Alege altul.");
            return false;
        }

        String sql = "INSERT INTO players(username, password) VALUES(?, ?)";

        try(PreparedStatement pstmt = db.connection.prepareStatement(sql))
        {
            pstmt.setString(1, username);
            pstmt.setString(2, password);
            pstmt.executeUpdate();
            System.out.println("Player inserted successfully.");
            return true;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    public boolean verifyCredentials(String username,String password)
    {
        String query = "SELECT 1 FROM players WHERE username = ? AND password = ?";

        try{
            PreparedStatement pstmt = db.connection.prepareStatement(query);

            pstmt.setString(1, username);
            pstmt.setString(2, password);

            ResultSet rs = pstmt.executeQuery();

            return rs.next() ;  // true daca s-a gasit o potrivire

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return false;
    }


    public void createLevelsTable()
    {
        if(isOracleDatabase()) {
            //delete
            String sql = """
            BEGIN
                EXECUTE IMMEDIATE 'DROP TABLE levels CASCADE CONSTRAINTS';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -942 THEN -- ORA-00942: table or view does not exist
                        RAISE;
                    END IF;
            END;
            """;
            try(PreparedStatement stm = db.connection.prepareStatement(sql))
            {
                stm.execute();
                System.out.println("Levels table dropped successfully (Oracle).");
            }
            catch (SQLException e)
            {
                e.printStackTrace();
            }

            sql = """
            BEGIN
                EXECUTE IMMEDIATE '
                    CREATE TABLE levels (
                        id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                        player_id NUMBER,
                        level_number NUMBER,
                        player_x NUMBER,
                        player_y NUMBER,
                        completed NUMBER(1) DEFAULT 0,
                        timer NUMBER,
                        score NUMBER,
                        CONSTRAINT fk_player FOREIGN KEY (player_id) REFERENCES players(id),
                        CONSTRAINT unique_level_per_player UNIQUE (player_id, level_number)
                    )
                ';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN -- ORA-00955: name is already used by an existing object
                        RAISE;
                    END IF;
            END;
            """;

            try (Statement stmt = db.connection.createStatement()) {
                stmt.execute(sql);
                System.out.println("Levels table created successfully in Oracle.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        else {
            // DELETE
            String sql = "DROP TABLE IF EXISTS levels";
            try{
                Statement stm = db.connection.createStatement();
                stm.executeUpdate(sql);
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }

            sql = """
            CREATE TABLE IF NOT EXISTS levels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                player_id INTEGER,
                level_number INTEGER,
                player_x INTEGER,
                player_y INTEGER,
                completed BOOLEAN DEFAULT 0,
                timer INTEGER,
                score INTEGER,
                FOREIGN KEY(player_id) REFERENCES players(id),
                UNIQUE(player_id, level_number)
            );
            """;

            try (Statement stmt = db.connection.createStatement()) {
                stmt.execute(sql);
                System.out.println("Levels table created successfully.");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private int getPlayerId(String username , String password)
    {
        String sqlPlayer = "SELECT id FROM players WHERE username = ? AND password = ?";
        try{
            PreparedStatement pstmt = db.connection.prepareStatement(sqlPlayer);
            pstmt.setString(1, username);
            pstmt.setString(2, password);
            ResultSet rs = pstmt.executeQuery();
            if(rs.next())
                return rs.getInt("id");
            else
                return -1;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return 0;
    }

    public void insertDefaultLevelsForPlayer(String username , String password) {
        int playerId = getPlayerId(username,password);
        String sql = "INSERT INTO levels (player_id, level_number,player_x , player_y, completed) VALUES (?, ?, ? , ?, 0)";
        try (PreparedStatement stmt = db.connection.prepareStatement(sql)) {
            for (int i = 1; i <= 3; i++) {
                stmt.setInt(1, playerId);
                stmt.setInt(2, i);
                stmt.setInt(3, 1050);
                stmt.setInt(4, 2050);
                stmt.addBatch();
            }
            stmt.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Point getPlayerPosition(String username , String password)
    {
        int playerId = getPlayerId(username,password);
        int map = getNextMapNumber(username,password);

        String sql ="SELECT player_x, player_y FROM levels WHERE player_id = ? AND level_number = ?";

        try(PreparedStatement stm = db.connection.prepareStatement(sql))
        {
            stm.setInt(1, playerId);
            stm.setInt(2,map);
            ResultSet rs = stm.executeQuery();
            if(rs.next())
            {
                int x = rs.getInt("player_x");
                int y = rs.getInt("player_y");
                return new Point(x,y);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new Point(1050,2050);
    }

    public void updatePlayerPosition(String username,String password,int x,int y)
    {
        String sql = "UPDATE levels SET player_x = ?, player_y = ? WHERE player_id = ? AND level_number = ?";
        int playerId = getPlayerId(username,password);
        int levelNumber = getNextMapNumber(username,password);

        try(PreparedStatement stmt = db.connection.prepareStatement(sql))
        {
            stmt.setInt(1,x);
            stmt.setInt(2, y);               // player_y
            stmt.setInt(3, playerId);        // player_id
            stmt.setInt(4, levelNumber);     // level_number

            int rows = stmt.executeUpdate();
            if(rows > 0)
                System.out.println("Player position updated.");
            else{
                System.out.println("Player position not updated.");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }




    public void insertLevel(String username, String password , int levelNumber , int timer , int score )
    {
//        if(levelNumber == 1)
//        {
//            insertDefaultLevelsForPlayer(getPlayerId(username,password));
//        }

        int playerId = getPlayerId(username,password);

        if(isOracleDatabase())
        {
            String sql = """
            MERGE INTO levels l
            USING (SELECT ? AS player_id, ? AS level_number FROM dual) src
            ON (l.player_id = src.player_id AND l.level_number = src.level_number)
            WHEN MATCHED THEN
                UPDATE SET completed = 1, timer = ?, score = ?
            WHEN NOT MATCHED THEN
                INSERT (player_id, level_number, completed, timer, score)
                VALUES (?, ?, 1, ?, ?)
            """;

            try (PreparedStatement pstmt = db.connection.prepareStatement(sql)) {
                pstmt.setInt(1, playerId);
                pstmt.setInt(2, levelNumber);
                pstmt.setInt(3, timer);
                pstmt.setInt(4, score);
                pstmt.setInt(5, playerId);
                pstmt.setInt(6, levelNumber);
                pstmt.setInt(7, timer);
                pstmt.setInt(8, score);

                pstmt.executeUpdate();
                System.out.println("S-a inserat sau actualizat cu succes datele pentru nivelul: " + levelNumber);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        else {


            try {
                String sql = """
                        INSERT OR REPLACE INTO levels (player_id, level_number, completed, timer, score) VALUES (?, ?, ?, ?, ?)
                        """;
                PreparedStatement pstmt = db.connection.prepareStatement(sql);

                pstmt.setInt(1, playerId);
                pstmt.setInt(2, levelNumber);
                pstmt.setBoolean(3, true);
                pstmt.setInt(4, timer);
                pstmt.setInt(5, score);

                pstmt.executeUpdate();

                System.out.println("S-a inserat cu succes datele de pe nivelul : " + levelNumber);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }


    public int getNextMapNumber(String username, String password)
    {
        int playerId = getPlayerId(username,password);

        String sql = "";
        if(isOracleDatabase())
        {
            sql = """
            SELECT level_number 
            FROM levels 
            WHERE player_id = ? AND completed = 0 
            ORDER BY level_number ASC 
            FETCH FIRST 1 ROWS ONLY
        """;
        }
        else {
            sql = "Select level_number FROM levels WHERE player_id = ? AND completed = 0 ORDER BY level_number ASC LIMIT 1";
        }

        try {
            PreparedStatement stm = db.connection.prepareStatement(sql);
            stm.setInt(1,playerId);
            ResultSet rs = stm.executeQuery();
            if(rs.next())
                return rs.getInt("level_number");

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        System.out.println("You completed all level");
        return 4; // toate nivelurile au fost completate
    }

    public void updateTotalScore(String username,String password)
    {
        int playerId = getPlayerId(username,password);
        String selectSql = "SELECT SUM(score) AS totalScore FROM levels WHERE player_id = ? AND completed = 1";

        try {
            PreparedStatement selectStmt = db.connection.prepareStatement(selectSql);
            selectStmt.setInt(1, playerId);
            ResultSet rs = selectStmt.executeQuery();

            if (rs.next()) {
                int totalScore = rs.getInt("totalScore");

                // Pasul 2: Update scor total în tabela players
                String updateSql = "UPDATE players SET score = ? WHERE id = ?";
                PreparedStatement updateStmt = db.connection.prepareStatement(updateSql);
                updateStmt.setInt(1, totalScore);
                updateStmt.setInt(2, playerId);

                updateStmt.executeUpdate();

                System.out.println("Scorul total a fost actualizat la: " + totalScore);
            } else {
                System.out.println("Nu există scoruri de actualizat.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public ArrayList<String> getScoreboard()
    {
        ArrayList <String> scoreboard = new ArrayList<>();
        int nr = 1;

        String sql = "";
        if(isOracleDatabase())
        {
            sql = "SELECT username, score FROM players ORDER BY score DESC FETCH FIRST 10 ROWS ONLY";

        }
        else {
            sql = "SELECT username,score FROM players ORDER BY score DESC LIMIT 10";
        }

        try {
        PreparedStatement stmt = db.connection.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String username = rs.getString("username");
            int score = rs.getInt("score");
            scoreboard.add(nr + ". " + username + "     -    Score: " + score);
            nr++;
        }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return scoreboard;

    }

    public void createDefaultCoinsTable()
    {
        String deletesql = "DROP TABLE default_coins";

        String sql = "";
        if(isOracleDatabase()) {
            sql = """
                BEGIN
                    EXECUTE IMMEDIATE '
                        CREATE TABLE default_coins (
                            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                            player_id NUMBER,
                            level_number NUMBER,
                            x NUMBER,
                            y NUMBER
                          
                        )
                    ';
                EXCEPTION
                    WHEN OTHERS THEN
                        IF SQLCODE != -955 THEN
                            RAISE;
                        END IF;
                END;
                """;
        }
        else{ // sqlite
            sql = """
            CREATE TABLE IF NOT EXISTS default_coins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                player_id INTEGER,
                level_number INTEGER,
              
                x INTEGER,
                y INTEGER
            )
            """;
        }

        try (Statement stm = db.connection.createStatement()){
//            stm.execute(deletesql);
//            System.out.println("Coins table dropped successfully.");
            stm.execute(sql);
            System.out.println("Coins table created successfully.");
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

    }

    public void insertCoinsDefault(String username , String password ,Map map,int mapNumber)
    {
        int playerId = getPlayerId(username,password);
        //String deleteSql = "DELETE FROM coins WHERE player_id = ? AND level_number = ?";
        String sql = "INSERT INTO default_coins (player_id, level_number, x, y) VALUES (?, ?, ?, ?)";

        try (PreparedStatement pstmt = db.connection.prepareStatement(sql)){
//            PreparedStatement stm = db.connection.prepareStatement(deleteSql);
//            stm.setInt(1,playerId);
//            stm.setInt(2,mapNumber);
//            stm.executeUpdate();

            for(SuperObject coin : map.items)
            {
                if(coin != null) {
                    pstmt.setInt(1, 0);
                    pstmt.setInt(2, mapNumber);
                    pstmt.setInt(3, coin.worldX);
                    pstmt.setInt(4, coin.worldY);
                    pstmt.addBatch();
                }
                else{
                    pstmt.setInt(1, 0);
                    pstmt.setInt(2, mapNumber);
                    pstmt.setInt(3, 0);
                    pstmt.setInt(4, 0);
                    pstmt.addBatch();
                }
            }

            pstmt.executeBatch();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public void downloadDefaultCoinsFromDatabase(String username, String password, Map map, int levelNumber) {
        int playerId = getPlayerId(username, password);
        playerId = 0 ; // pentru default coins
        String sql = "SELECT x, y FROM default_coins WHERE player_id = ? AND level_number = ?";

        try (PreparedStatement stmt = db.connection.prepareStatement(sql)) {
            stmt.setInt(1, playerId);
            stmt.setInt(2, levelNumber);

            ResultSet rs = stmt.executeQuery();

            int index = 0;
            while (rs.next() && index < map.items.length) {
                int x = rs.getInt("x");
                int y = rs.getInt("y");

                if (x == 0 && y == 0) {
                    map.items[index] = null;
                } else {
                    int ok = 1;
                    switch (levelNumber) {
                        case 1:
                            if(index == 0 || index == 11)
                            {
                                Key key = new Key();
                                key.worldX = x;
                                key.worldY = y;
                                map.items[index] = key;

                                ok = 0;
                            }
                            break;
                        case 2:
                            if(index == 0 || index == 15)
                            {
                                Key key = new Key();
                                key.worldX = x;
                                key.worldY = y;
                                map.items[index] = key;

                                ok=0;
                            }
                            break;
                        case 3:
                            if(index == 20 || index == 21)
                            {
                                Key key = new Key();
                                key.worldX = x;
                                key.worldY = y;
                                map.items[index] = key;

                                ok=0;
                            }
                            break;
                    }
                    if( ok == 1) // nu e cheie
                    {
                        Coin coin = new Coin();
                        coin.worldX = x;
                        coin.worldY = y;
                        map.items[index] = coin;
                    }
                }
                index++;
            }

            // Dacă sunt mai puține coinuri decât dimensiunea vectorului, restul rămân null
            while (index < map.items.length) {
                map.items[index] = null;
                index++;
            }

//            for(SuperObject item: map.items)
//            {
//                if(item != null)
//                System.out.println(item.worldX + " "+item.worldY);
//            }
            System.out.println("Coin-urile au fost descarcate pentru nivelul " + levelNumber);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void createCoinsTable()
    {
        String deletesql = "DROP TABLE coins";

        String sql = "";
        if(isOracleDatabase()) {
            sql = """
            BEGIN
                EXECUTE IMMEDIATE '
                    CREATE TABLE coins (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        player_id NUMBER,
                        level_number NUMBER,
                        index_in_map NUMBER,
                        x NUMBER,
                        y NUMBER,
                        CONSTRAINT coins_unique UNIQUE (player_id, level_number, index_in_map)
                    )
                ';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
            """;
        } else {
            sql = """
        CREATE TABLE IF NOT EXISTS coins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            player_id INTEGER,
            level_number INTEGER,
            index_in_map INTEGER,
            x INTEGER,
            y INTEGER,
            UNIQUE(player_id, level_number, index_in_map)
        )
        """;
        }

        try (Statement stm = db.connection.createStatement()) {
            // stm.execute(deletesql);
            stm.execute(sql);
            System.out.println("Coins table created successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void updateCoinsForPlayerAndLevel(String username, String password, Map map, int levelNumber) {
        int playerId = getPlayerId(username, password);

        String sql = """
        UPDATE coins
        SET x = ?, y = ?
        WHERE player_id = ? AND level_number = ? AND index_in_map = ?
        """;

        //System.out.println("*********** Level " + levelNumber + " ***********");
        try (PreparedStatement pstmt = db.connection.prepareStatement(sql)) {
            for (int i = 0; i < map.items.length; i++) {
                SuperObject item = map.items[i];
                int x = 0, y = 0;
                if (item != null) {
                    x = item.worldX;
                    y = item.worldY;
                }

                pstmt.setInt(1, x);
                pstmt.setInt(2, y);
                pstmt.setInt(3, playerId);
                pstmt.setInt(4, levelNumber);
                pstmt.setInt(5, i); // index_in_map
                pstmt.addBatch();
            }

            pstmt.executeBatch();
            System.out.println("Coins actualizate cu succes pentru player_id=" + playerId + ", level=" + levelNumber);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void insertCoinsPlayerTables(String username , String password , Map map, int mapNumber) {
        int playerId = getPlayerId(username, password);
        String sql = "INSERT INTO coins (player_id, level_number, index_in_map, x, y) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = db.connection.prepareStatement(sql)) {
            for (int i = 0; i < map.items.length; i++) {
                SuperObject coin = map.items[i];
                int x = 0, y = 0;
                if (coin != null) {
                    x = coin.worldX;
                    y = coin.worldY;
                }
                pstmt.setInt(1, playerId);
                pstmt.setInt(2, mapNumber);
                pstmt.setInt(3, i); // index_in_map
                pstmt.setInt(4, x);
                pstmt.setInt(5, y);
                pstmt.addBatch();
            }
            pstmt.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void updateTimer(String username, String password, int levelNumber, int newTimer) {
        int playerId = getPlayerId(username, password);
        String sql = "UPDATE levels SET timer = ? WHERE player_id = ? AND level_number = ?";

        try (PreparedStatement pstmt = db.connection.prepareStatement(sql)) {
            pstmt.setInt(1, newTimer);
            pstmt.setInt(2, playerId);
            pstmt.setInt(3, levelNumber);

            int affectedRows = pstmt.executeUpdate();
            if (affectedRows > 0) {
                //System.out.println(username + "Timer actualizat cu succes pentru nivelul " + levelNumber);
            } else {
                System.out.println("Nivelul nu a fost găsit pentru actualizare.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int getTimer(String username, String password, int levelNumber) {
        int playerId = getPlayerId(username, password);
        String sql = "SELECT timer FROM levels WHERE player_id = ? AND level_number = ?";

        try (PreparedStatement pstmt = db.connection.prepareStatement(sql)) {
            pstmt.setInt(1, playerId);
            pstmt.setInt(2, levelNumber);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("timer");
                } else {
                    System.out.println("Nu s-a găsit nivelul specificat.");
                    return 0; // Valoare convențională pentru "nu s-a găsit"
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return 0;
        }
    }

    public void downloadCoinsFromDatabase(String username, String password, Map map, int levelNumber) {
        int playerId = getPlayerId(username, password);
        String sql = "SELECT x, y FROM coins WHERE player_id = ? AND level_number = ?";

        try (PreparedStatement stmt = db.connection.prepareStatement(sql)) {
            stmt.setInt(1, playerId);
            stmt.setInt(2, levelNumber);

            ResultSet rs = stmt.executeQuery();

            int index = 0;
            while (rs.next() && index < map.items.length) {
                int x = rs.getInt("x");
                int y = rs.getInt("y");

                if (x == 0 && y == 0) {
                    map.items[index] = null;
                } else {
                    boolean isKey = false;
                    switch (levelNumber) {
                        case 1:
                            if (index == 0 || index == 11) isKey = true;
                            break;
                        case 2:
                            if (index == 0 || index == 15) isKey = true;
                            break;
                        case 3:
                            if (index == 20 || index == 21) isKey = true;
                            break;
                    }

                    if (isKey) {
                        Key key = new Key();
                        key.worldX = x;
                        key.worldY = y;
                        map.items[index] = key;
                    } else {
                        Coin coin = new Coin();
                        coin.worldX = x;
                        coin.worldY = y;
                        map.items[index] = coin;
                    }
                }
                index++;
            }


            while (index < map.items.length) {
                map.items[index] = null;
                index++;
            }

            System.out.println("Coin-urile au fost descarcate pentru nivelul " + levelNumber);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Point getNrOfCoinsPicked(RefLinks refLink, int mapNumber)
    {
        int nrOfCoinsPicked = 0;
        int nrOfKeysPicked = 0;

        SuperObject []item = refLink.GetMap().items;
        int index = 0;
        for( index =0 ;index<item.length;index++)
        {
            if(item[index] == null || (item[index].worldX == 0 && item[index].worldY == 0) ) {
                switch (mapNumber) {
                    case 1: {
                        if (index == 0 || index == 11) {
                            nrOfKeysPicked++;
                        } else {
                            nrOfCoinsPicked++;
                        }
                        break;
                    }
                    case 2: {
                        if (index == 0 || index == 15) {
                            nrOfKeysPicked++;
                        } else {
                            nrOfCoinsPicked++;
                        }
                        break;
                    }
                    case 3: {
                        if (index == 20 || index == 21) {
                            nrOfKeysPicked++;
                        } else {
                            nrOfCoinsPicked++;
                        }
                        break;
                    }
                }
            }
        }
        nrOfCoinsPicked -=3;
        if(mapNumber == 2)
        {
            nrOfCoinsPicked ++;
        }
        else if(mapNumber == 3)
        {
            nrOfCoinsPicked +=3;
        }
        return new Point(nrOfCoinsPicked,nrOfKeysPicked);
    }

    public void insertEmptyCoinsForPlayerAndLevel(String username, String password, Map map, int levelNumber) {
        int playerId = getPlayerId(username, password);

        // Verificăm dacă deja există coins pentru acest player și nivel
        String checkSql = "SELECT COUNT(*) FROM coins WHERE player_id = ? AND level_number = ?";
        String insertSql = "INSERT INTO coins (player_id, level_number, index_in_map, x, y) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement checkStmt = db.connection.prepareStatement(checkSql)) {
            checkStmt.setInt(1, playerId);
            checkStmt.setInt(2, levelNumber);

            ResultSet rs = checkStmt.executeQuery();
            rs.next();
            int count = rs.getInt(1);

            if (count > 0) {
                System.out.println("Coins already exist for player " + playerId + ", level " + levelNumber);
                return; // Nu mai inserăm dacă deja există
            }

            // Inserăm rânduri goale (x=0, y=0) pentru fiecare item din hartă
            try (PreparedStatement insertStmt = db.connection.prepareStatement(insertSql)) {
                for (int i = 0; i < map.items.length; i++) {
                    insertStmt.setInt(1, playerId);
                    insertStmt.setInt(2, levelNumber);
                    insertStmt.setInt(3, i); // index_in_map
                    insertStmt.setInt(4, 0); // x
                    insertStmt.setInt(5, 0); // y
                    insertStmt.addBatch();
                }
                insertStmt.executeBatch();
                System.out.println("Coins inițializați cu succes pentru player_id=" + playerId + ", level=" + levelNumber);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


